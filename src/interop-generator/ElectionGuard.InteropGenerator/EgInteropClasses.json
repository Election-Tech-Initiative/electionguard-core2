[
  {
    "ClassName": "PlaintextBallotSelection",
    "NeverFree": true,
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "Get the objectId of the selection which is the unique id for the selection in a specific contest described in the election manifest."
      },
      {
        "Name": "IsPlaceholder",
        "Type": {
          "TypeCs": "bool"
        },
        "Description": "Determines if this is a placeholder selection"
      },
      {
        "Name": "Vote",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "Get the plaintext vote"
      },
      {
        "Name": "ExtendedData",
        "Type": {
          "TypeCs": "ExtendedData",
          "NativeHandleType": "NativeInterface.ExtendedData.ExtendedDataHandle",
          "TypeC": "eg_extended_data_t"
        },
        "Description": "An optional field of arbitrary data, such as the value of a write-in candidate"
      }
    ],
    "Methods": [
      {
        "Name": "IsValid",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given a PlaintextBallotSelection validates that the object matches an expected object and that the plaintext value can resolve to a valid representation",
        "Params": [
          {
            "Name": "expectedObjectId",
            "Type": {
              "TypeCs": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "PlaintextBallotContest",
    "NeverFree": true,
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "Get the objectId of the contest, which is the unique id for the contest in a specific ballot style described in the election manifest."
      },
      {
        "Name": "SelectionsSize",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "Get the Size of the selections collection"
      }
    ],
    "Methods": [
      {
        "Name": "IsValid",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given a PlaintextBallotContest returns true if the state is representative of the expected values.  Note: because this class supports partial representations, undervotes are considered a valid state.",
        "Params": [
          {
            "Name": "expectedObjectId",
            "Type": {
              "TypeCs": "string"
            }
          },
          {
            "Name": "expectedNumSelections",
            "Type": {
              "TypeCs": "ulong"
            }
          },
          {
            "Name": "expectedNumElected",
            "Type": {
              "TypeCs": "ulong"
            }
          },
          {
            "Name": "votesAllowed",
            "Type": {
              "TypeCs": "ulong"
            },
            "DefaultValue": "0"
          }
        ]
      },
      {
        "Name": "GetSelectionAtIndex",
        "Description": "Get a selection at a specific index.",
        "CallerShouldFree": false,
        "ReturnType": {
          "TypeCs": "PlaintextBallotSelection",
          "TypeC": "eg_plaintext_ballot_selection_t",
          "NativeHandleType": "PlaintextBallotSelection.External.PlaintextBallotSelectionHandle"
        },
        "Params": [
          {
            "Name": "index",
            "Description": "The index of the selection",
            "Type": {
              "TypeCs": "ulong"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "PlaintextBallot",
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "A unique Ballot ID that is relevant to the external system and must be unique within the dataset of the election."
      },
      {
        "Name": "StyleId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "The Object Id of the ballot style in the election manifest.  This value is used to determine which contests to expect on the ballot, to fill in missing values, and to validate that the ballot is well-formed."
      },
      {
        "Name": "ContestsSize",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "The size of the Contests collection."
      }
    ],
    "Methods": [
      {
        "Name": "GetContestAtIndex",
        "Description": "Get the contest at the specified index.",
        "CallerShouldFree": false,
        "ReturnType": {
          "TypeCs": "PlaintextBallotContest",
          "TypeC": "eg_plaintext_ballot_contest_t",
          "NativeHandleType": "PlaintextBallotContest.External.PlaintextBallotContestHandle"
        },
        "Params": [
          {
            "Name": "index",
            "Description": "The index of the contest",
            "Type": {
              "TypeCs": "ulong"
            }
          }
        ]
      },
      {
        "Name": "ToJson",
        "ReturnType": {
          "TypeCs": "string"
        },
        "Description": "Export the ballot representation as JSON",
        "Params": [
        ]
      },
      {
        "Name": "ToBson",
        "ReturnType": {
          "TypeCs": "byte[]"
        },
        "Description": "Export the ballot representation as BSON",
        "Params": [
        ]
      },
      {
        "Name": "ToMsgPack",
        "ReturnType": {
          "TypeCs": "byte[]"
        },
        "Description": "Export the ballot representation as MsgPack",
        "Params": [
        ]
      }
    ]
  },
  {
    "ClassName": "CiphertextBallotSelection",
    "NeverFree": true,
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Description": "Get the objectId of the selection, which is the unique id for the selection in a specific contest described in the election manifest.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "SequenceOrder",
        "Description": "Get the sequence order of the selection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "IsPlaceholder",
        "Description": "Determines if this is a placeholder selection",
        "Type": {
          "TypeCs": "bool"
        }
      },
      {
        "Name": "DescriptionHash",
        "Description": "The hash of the string representation of the Selection Description from the election manifest",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Ciphertext",
        "Description": "The encrypted representation of the vote field",
        "Type": {
          "TypeCs": "ElGamalCiphertext",
          "NativeHandleType": "NativeInterface.ElGamalCiphertext.ElGamalCiphertextHandle",
          "TypeC": "eg_elgamal_ciphertext_t"
        }
      },
      {
        "Name": "CryptoHash",
        "Description": "The hash of the encrypted values",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Nonce",
        "Description": "The nonce used to generate the encryption. Sensitive &amp; should be treated as a secret",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Proof",
        "Description": "The proof that demonstrates the selection is an encryption of 0 or 1, and was encrypted using the `nonce`",
        "Type": {
          "TypeCs": "DisjunctiveChaumPedersenProof",
          "NativeHandleType": "NativeInterface.DisjunctiveChaumPedersenProof.DisjunctiveChaumPedersenProofHandle",
          "TypeC": "eg_disjunctive_chaum_pedersen_proof_t"
        }
      }
    ],
    "Methods": [
      {
        "Name": "CryptoHashWith",
        "Description": "Given an encrypted BallotSelection, generates a hash, suitable for rolling up into a hash / tracking code for an entire ballot. Of note, this particular hash examines the `encryptionSeed` and `message`, but not the proof. This is deliberate, allowing for the possibility of ElectionGuard variants running on much more limited hardware, wherein the Disjunctive Chaum-Pedersen proofs might be computed later on. In most cases the encryption_seed should match the `description_hash`.",
        "CallerShouldFree": true,
        "ReturnType": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        },
        "Params": [
          {
            "Name": "encryptionSeed",
            "Description": "In most cases the encryption_seed should match the `description_hash`",
            "Type": {
              "TypeCs": "ElementModQ",
              "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
              "TypeC": "eg_element_mod_q_t"
            }
          }
        ]
      },
      {
        "Name": "IsValidEncryption",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given an encrypted BallotSelection, validates the encryption state against a specific seed hash and public key. Calling this function expects that the object is in a well-formed encrypted state with the elgamal encrypted `message` field populated along with the DisjunctiveChaumPedersenProof`proof` populated. the ElementModQ `description_hash` and the ElementModQ `crypto_hash` are also checked.",
        "Params": [
          {
            "Name": "encryptionSeed",
            "Description": "The hash of the SelectionDescription, or whatever `ElementModQ` was used to populate the `description_hash` field.",
            "Type": {
              "TypeCs": "ElementModQ",
              "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
              "TypeC": "eg_element_mod_q_t"
            }
          },
          {
            "Name": "elGamalPublicKey",
            "Description": "The election public key.",
            "Type": {
              "TypeCs": "ElementModP",
              "NativeHandleType": "NativeInterface.ElementModP.ElementModPHandle",
              "TypeC": "eg_element_mod_p_t"
            }
          },
          {
            "Name": "cryptoExtendedBaseHash",
            "Description": "The extended base hash of the election.",
            "Type": {
              "TypeCs": "ElementModQ",
              "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
              "TypeC": "eg_element_mod_q_t"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "CiphertextBallotContest",
    "NeverFree": true,
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Description": "Get the objectId of the contest, which is the unique id for the contest in a specific ballot described in the election manifest.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "SequenceOrder",
        "Description": "Get the sequence order of the contest",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "DescriptionHash",
        "Description": "The hash of the string representation of the Contest Description from the election manifest",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "SelectionsSize",
        "Description": "Get the Size of the selections collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "CryptoHash",
        "Description": "The hash of the encrypted values",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Nonce",
        "Description": "The nonce used to generate the encryption. Sensitive &amp; should be treated as a secret",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Proof",
        "Description": "The proof demonstrates the sum of the selections does not exceed the maximum available selections for the contest, and that the proof was generated with the nonce",
        "Type": {
          "TypeCs": "DisjunctiveChaumPedersenProof",
          "NativeHandleType": "NativeInterface.DisjunctiveChaumPedersenProof.DisjunctiveChaumPedersenProofHandle",
          "TypeC": "eg_disjunctive_chaum_pedersen_proof_t"
        }
      }
    ],
    "Methods": []
  },
  {
    "ClassName": "CiphertextBallot",
    "CInclude": "ballot.h",
    "Properties": [
      {
        "Name": "ObjectId",
        "Description": "The unique ballot id that is meaningful to the consuming application.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "StyleId",
        "Description": "The Object Id of the ballot style in the election manifest.  This value is used to determine which contests to expect on the ballot, to fill in missing values, and to validate that the ballot is well-formed",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "ManifestHash",
        "Description": "Hash of the complete Election Manifest to which this ballot belongs",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "BallotCodeSeed",
        "Description": "The seed hash for the ballot.  It may be the encryption device hash, the hash of a previous ballot or the hash of some other value that is meaningful to the consuming application.",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "ContestsSize",
        "Description": "Get the size of the contests collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "BallotCode",
        "Description": "The unique ballot code for this ballot that is derived from the ballot seed, the timestamp, and the hash of the encrypted values",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Timestamp",
        "Description": "The timestamp indicating when the ballot was encrypted as measured by the encryption device.  This value does not provide units as it is up to the host system to indicate the scale. Typically a host may use seconds since epoch or ticks since epoch.",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "Nonce",
        "Description": "The nonce value used to encrypt all values in the ballot",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      }
    ],
    "Methods": [
      {
        "Name": "GetContestAtIndex",
        "CallerShouldFree": false,
        "Description": "Get a contest at a specific index",
        "ReturnType": {
          "TypeCs": "CiphertextBallotContest",
          "TypeC": "eg_ciphertext_ballot_contest_t",
          "NativeHandleType": "CiphertextBallotContest.External.CiphertextBallotContestHandle"
        },
        "Params": [
          {
            "Name": "index",
            "Description": "The index of the contest",
            "Type": {
              "TypeCs": "ulong"
            }
          }
        ]
      },
      {
        "Name": "IsValidEncryption",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given an encrypted Ballot, validates the encryption state against a specific ballot seed and public key by verifying the states of this ballot's members (BallotContest's and BallotSelection's). Calling this function expects that the object is in a well-formed encrypted state with the `contests` populated with valid encrypted ballot selections, and the ElementModQ `manifest_hash` also populated. Specifically, the seed in this context is the hash of the Election Manifest, or whatever `ElementModQ` was used to populate the `manifest_hash` field.",
        "Params": [
          {
            "Name": "manifestHash",
            "Type": {
              "TypeCs": "ElementModQ",
              "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
              "TypeC": "eg_element_mod_q_t"
            }
          },
          {
            "Name": "elGamalPublicKey",
            "Type": {
              "TypeCs": "ElementModP",
              "NativeHandleType": "NativeInterface.ElementModP.ElementModPHandle",
              "TypeC": "eg_element_mod_p_t"
            }
          },
          {
            "Name": "cryptoExtendedBaseHash",
            "Type": {
              "TypeCs": "ElementModQ",
              "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
              "TypeC": "eg_element_mod_q_t"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "Manifest",
    "CustomCName": "election_manifest",
    "CInclude": "manifest.h",
    "Properties": [
      {
        "Name": "ElectionScopeId",
        "Description": "Unique identifier for a GpUnit element. Associates the election with a reporting unit that represents the geographical scope of the election, such as a state or city.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "ElectionType",
        "Description": "Enumerated type of election, such as partisan-primary or open-primary.",
        "Type": {
          "TypeCs": "ElectionType",
          "NativeHandleType": null,
          "TypeC": "eg_election_type_t"
        }
      },
      {
        "Name": "StartDate",
        "Description": "The start date/time of the election.",
        "Type": {
          "TypeCs": "DateTime"
        }
      },
      {
        "Name": "EndDate",
        "Description": "The end date/time of the election.",
        "Type": {
          "TypeCs": "DateTime"
        }
      },
      {
        "Name": "GeopoliticalUnitsSize",
        "Description": "The size of the geopolitical units collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "PartiesSize",
        "Description": "The size of the parties collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "CandidatesSize",
        "Description": "The size of the candidates collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "ContestsSize",
        "Description": "The size of the contests collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "BallotStylesSize",
        "Description": "The size of the ballot styles collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "Name",
        "Description": "The friendly name of the election",
        "Type": {
          "TypeCs": "InternationalizedText",
          "NativeHandleType": "NativeInterface.InternationalizedText.InternationalizedTextHandle",
          "TypeC": "eg_internationalized_text_t"
        }
      },
      {
        "Name": "ContactInfo",
        "Description": "The contact information for the election",
        "Type": {
          "TypeCs": "ContactInformation",
          "NativeHandleType": "NativeInterface.ContactInformation.ContactInformationHandle",
          "TypeC": "eg_contact_information_t"
        }
      }
    ],
    "Methods": []
  }
]
