[
  {
    "ClassName": "PlaintextBallotSelection",
    "NeverFree": true,
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "Get the objectId of the selection which is the unique id for the selection in a specific contest described in the election manifest."
      },
      {
        "Name": "IsPlaceholder",
        "Type": {
          "TypeCs": "bool"
        },
        "Description": "Determines if this is a placeholder selection"
      },
      {
        "Name": "Vote",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "Get the plaintext vote"
      },
      {
        "Name": "ExtendedData",
        "Type": {
          "TypeCs": "ExtendedData",
          "NativeHandleType": "NativeInterface.ExtendedData.ExtendedDataHandle",
          "TypeC": "eg_extended_data_t"
        },
        "Description": "An optional field of arbitrary data, such as the value of a write-in candidate"
      }
    ],
    "Methods": [
      {
        "Name": "IsValid",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given a PlaintextBallotSelection validates that the object matches an expected object and that the plaintext value can resolve to a valid representation",
        "Params": [
          {
            "Name": "expectedObjectId",
            "Type": {
              "TypeCs": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "PlaintextBallotContest",
    "NeverFree": true,
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "Get the objectId of the contest, which is the unique id for the contest in a specific ballot style described in the election manifest."
      },
      {
        "Name": "SelectionsSize",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "Get the Size of the selections collection"
      }
    ],
    "Methods": [
      {
        "Name": "IsValid",
        "ReturnType": {
          "TypeCs": "bool"
        },
        "Description": "Given a PlaintextBallotContest returns true if the state is representative of the expected values.  Note: because this class supports partial representations, undervotes are considered a valid state.",
        "Params": [
          {
            "Name": "expectedObjectId",
            "Type": {
              "TypeCs": "string"
            }
          },
          {
            "Name": "expectedNumSelections",
            "Type": {
              "TypeCs": "ulong"
            }
          },
          {
            "Name": "expectedNumElected",
            "Type": {
              "TypeCs": "ulong"
            }
          },
          {
            "Name": "votesAllowed",
            "Type": {
              "TypeCs": "ulong"
            },
            "DefaultValue": "0"
          }
        ]
      },
      {
        "Name": "GetSelectionAtIndex",
        "ReturnType": {
          "TypeCs": "PlaintextBallotSelection",
          "TypeC": "eg_plaintext_ballot_selection_t",
          "NativeHandleType": "PlaintextBallotSelection.External.PlaintextBallotSelectionHandle"
        },
        "Description": "Get a selection at a specific index.",
        "Params": [
          {
            "Name": "index",
            "Description": "The index of the selection",
            "Type": {
              "TypeCs": "ulong"
            }
          }
        ]
      }
    ]
  },
  {
    "ClassName": "PlaintextBallot",
    "Properties": [
      {
        "Name": "ObjectId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "A unique Ballot ID that is relevant to the external system and must be unique within the dataset of the election."
      },
      {
        "Name": "StyleId",
        "Type": {
          "TypeCs": "string"
        },
        "Description": "The Object Id of the ballot style in the election manifest.  This value is used to determine which contests to expect on the ballot, to fill in missing values, and to validate that the ballot is well-formed."
      },
      {
        "Name": "ContestsSize",
        "Type": {
          "TypeCs": "ulong"
        },
        "Description": "The size of the Contests collection."
      }
    ],
    "Methods": [
      {
        "Name": "GetContestAtIndex",
        "ReturnType": {
          "TypeCs": "PlaintextBallotContest",
          "TypeC": "eg_plaintext_ballot_contest_t",
          "NativeHandleType": "PlaintextBallotContest.External.PlaintextBallotContestHandle"
        },
        "Description": "Get the contest at the specified index.",
        "Params": [
          {
            "Name": "index",
            "Description": "The index of the contest",
            "Type": {
              "TypeCs": "ulong"
            }
          }
        ]
      },
      {
        "Name": "ToJson",
        "ReturnType": {
          "TypeCs": "string"
        },
        "Description": "Export the ballot representation as JSON",
        "Params": [
        ] 
      }
    ]
  },
  {
    "ClassName": "CiphertextBallotSelection",
    "NeverFree": true,
    "Properties": [
      {
        "Name": "ObjectId",
        "Description": "Get the objectId of the selection, which is the unique id for the selection in a specific contest described in the election manifest.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "SequenceOrder",
        "Description": "Get the sequence order of the selection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "IsPlaceholder",
        "Description": "Determines if this is a placeholder selection",
        "Type": {
          "TypeCs": "bool"
        }
      },
      {
        "Name": "DescriptionHash",
        "Description": "The hash of the string representation of the Selection Description from the election manifest",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Ciphertext",
        "Description": "The encrypted representation of the vote field",
        "Type": {
          "TypeCs": "ElGamalCiphertext",
          "NativeHandleType": "NativeInterface.ElGamalCiphertext.ElGamalCiphertextHandle",
          "TypeC": "eg_elgamal_ciphertext_t"
        }
      },
      {
        "Name": "CryptoHash",
        "Description": "The hash of the encrypted values",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Nonce",
        "Description": "The nonce used to generate the encryption. Sensitive &amp; should be treated as a secret",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Proof",
        "Description": "The proof that demonstrates the selection is an encryption of 0 or 1, and was encrypted using the `nonce`",
        "Type": {
          "TypeCs": "DisjunctiveChaumPedersenProof",
          "NativeHandleType": "NativeInterface.DisjunctiveChaumPedersenProof.DisjunctiveChaumPedersenProofHandle",
          "TypeC": "eg_disjunctive_chaum_pedersen_proof_t"
        }
      }
    ],
    "Methods": []
  },
  {
    "ClassName": "CiphertextBallotContest",
    "NeverFree": true,
    "Properties": [
      {
        "Name": "ObjectId",
        "Description": "Get the objectId of the contest, which is the unique id for the contest in a specific ballot described in the election manifest.",
        "Type": {
          "TypeCs": "string"
        }
      },
      {
        "Name": "SequenceOrder",
        "Description": "Get the sequence order of the contest",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "DescriptionHash",
        "Description": "The hash of the string representation of the Contest Description from the election manifest",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "SelectionsSize",
        "Description": "Get the Size of the selections collection",
        "Type": {
          "TypeCs": "ulong"
        }
      },
      {
        "Name": "CryptoHash",
        "Description": "The hash of the encrypted values",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Nonce",
        "Description": "The nonce used to generate the encryption. Sensitive &amp; should be treated as a secret",
        "Type": {
          "TypeCs": "ElementModQ",
          "NativeHandleType": "NativeInterface.ElementModQ.ElementModQHandle",
          "TypeC": "eg_element_mod_q_t"
        }
      },
      {
        "Name": "Proof",
        "Description": "The proof demonstrates the sum of the selections does not exceed the maximum available selections for the contest, and that the proof was generated with the nonce",
        "Type": {
          "TypeCs": "DisjunctiveChaumPedersenProof",
          "NativeHandleType": "NativeInterface.DisjunctiveChaumPedersenProof.DisjunctiveChaumPedersenProofHandle",
          "TypeC": "eg_disjunctive_chaum_pedersen_proof_t"
        }
      }
    ],
    "Methods": []
  }
]
