//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectionGuard.InteropGenerator.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ElectionGuard.InteropGenerator.Helpers;
    using System;
    
    
    public partial class CHeaderTemplate : CHeaderTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 ""

	var classNameSnakeCase = EgClass.CFunctionPrefix;
	var classHandle = $"eg_{classNameSnakeCase}_t";

            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write("/// @file ");
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( classNameSnakeCase.ToLower() ));
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write(".generated.h\n#pragma once\n\n#include \"chaum_pedersen.h\"\n#include \"elgamal.h\"\n#incl" +
                    "ude \"export.h\"\n#include \"group.h\"\n#include \"status.h\"\n");
            
            #line default
            #line hidden
            
            #line 19 ""
 if (EgClass.CInclude != null) { 
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.CInclude ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("\"\n");
            
            #line default
            #line hidden
            
            #line 21 ""
 } 
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write("\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef ");
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.ClassName ));
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write("\n\n");
            
            #line default
            #line hidden
            
            #line 29 ""
 foreach (var egProperty in EgClass.Properties) { 
	var entryPoint = egProperty.GetEntryPoint(EgClass);
	var returnType = egProperty.GetCReturnType();
	var outParamName = "out_" + egProperty.Name.ToSnakeCase();
	var isReferenceType = egProperty.IsPassByReference;

            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("/**\n * @brief ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Description ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("\n * @param[in] handle A pointer to the `eg_plaintext_ballot_selection_t` opaque i" +
                    "nstance\n");
            
            #line default
            #line hidden
            
            #line 38 ""
 if (isReferenceType) { 
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(" * @param[out] ");
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( outParamName ));
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(" A pointer to the output ");
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write(".  ");
            
            #line default
            #line hidden
            
            #line 39 ""

if (egProperty.CallerShouldFree) {
	this.Write("The caller is responsible for freeing it.");
} else {
	this.Write("The value is a reference and is not owned by the caller.");
}
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write("\n * @return eg_electionguard_status_t indicating success or failure\n * @retval EL" +
                    "ECTIONGUARD_STATUS_SUCCESS The function was successfully executed\n * @retval ELE" +
                    "CTIONGUARD_STATUS_ERROR_BAD_ALLOC The function was unable to allocate memory\n");
            
            #line default
            #line hidden
            
            #line 49 ""
 } else /* if value type */ { 
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write(" * @return The value of the property\n");
            
            #line default
            #line hidden
            
            #line 51 ""
 } // end is reference type 
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(" */\nEG_API ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( returnType ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entryPoint ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("(\n\t");
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( classHandle ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(" *handle");
            
            #line default
            #line hidden
            
            #line 54 ""

if (isReferenceType) {

            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(",\n\t");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.OutVarType ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( outParamName ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("\n\t);\n");
            
            #line default
            #line hidden
            
            #line 60 ""
 } else { 
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write("\n\t);\n");
            
            #line default
            #line hidden
            
            #line 63 ""
 } 
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 65 ""
 } // foreach property 
            
            #line default
            #line hidden
            
            #line 66 ""
 foreach (var egMethod in EgClass.Methods) { 
	var entryPoint = egMethod.GetEntryPoint(EgClass); 
	var returnType = egMethod.GetCReturnType();
	
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write("/**\n * ");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egMethod.Description ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 72 ""
 foreach (var parameter in egMethod.Params.Where(p => p.Description != null)) { 
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(" * @param[in] ");
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( parameter.CName ));
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( parameter.Description ));
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 74 ""
 } // foreach parameter 
            
            #line default
            #line hidden
            
            #line 75 ""
 if (egMethod.ReturnType.IsElectionGuardType) { 
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(" * @param[out] ");
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egMethod.ReturnTypeCName ));
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(" An opaque pointer to the ");
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egMethod.ReturnType.TypeCs ));
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 77 ""
 
if (egMethod.CallerShouldFree == null) {
	throw new InvalidOperationException($"{egMethod.Name} must define CallerShouldFree because it is a reference type"); 
} else if (egMethod.CallerShouldFree.Value == true) { 
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(" *                               The caller is responsible for freeing it.\n");
            
            #line default
            #line hidden
            
            #line 82 ""
 } else if (egMethod.CallerShouldFree.Value == false) { 
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write(" *                               The value is a reference and is not owned by the" +
                    " caller\n");
            
            #line default
            #line hidden
            
            #line 84 ""
 } // end CallerShouldFree 
            
            #line default
            #line hidden
            
            #line 85 ""
 } // end if method is reference type 
            
            #line default
            #line hidden
            
            #line 86 ""
            this.Write(" */\nEG_API ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( returnType ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entryPoint ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("(\n\teg_");
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.ClassName.ToSnakeCase() ));
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write("_t *handle");
            
            #line default
            #line hidden
            
            #line 88 ""

foreach (var parameter in egMethod.Params) {
	var parameterCName = parameter.CName;
	this.Write($",{Environment.NewLine}\t{parameter.TypeC}{parameterCName}");
}
if (egMethod.ReturnType.IsElectionGuardType) {
	var outVarReturnType = egMethod.ReturnType.OutVarCType;
	var outParamName = egMethod.ReturnTypeCName;
	this.Write($",{Environment.NewLine}\t{outVarReturnType}{outParamName}");
}
if (egMethod.ReturnType.TypeCs == "string") {

            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write(",\n\tchar **out_data,\n\tuint64_t *out_size");
            
            #line default
            #line hidden
            
            #line 102 ""

}
if (egMethod.ReturnType.TypeCs == "byte[]") {

            
            #line default
            #line hidden
            
            #line 106 ""
            this.Write(",\n\tuint8_t **out_data,\n\tuint64_t *out_size");
            
            #line default
            #line hidden
            
            #line 108 ""

}

            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("\n\t);\n\n");
            
            #line default
            #line hidden
            
            #line 114 ""
 } // foreach method 
            
            #line default
            #line hidden
            
            #line 115 ""
            this.Write("/**\n * Frees the memory held by the ");
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.ClassName ));
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n */\nEG_API eg_electionguard_status_t eg_");
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.CFunctionPrefix ));
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write("_free(");
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( classHandle ));
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write(" *handle);\n\n#endif // ifndef ");
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.ClassName ));
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write("\n\n#ifdef __cplusplus\n}\n#endif\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CHeaderTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
