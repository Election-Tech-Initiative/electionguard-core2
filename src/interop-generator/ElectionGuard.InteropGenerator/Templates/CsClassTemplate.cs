//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectionGuard.InteropGenerator.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Text.Json;
    using ElectionGuard.InteropGenerator.Helpers;
    using System;
    
    
    public partial class CsClassTemplate : CsClassTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 8 ""

var className = EgClass.ClassName;

            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write(@"// DO NOT MODIFY THIS FILE
// This file is generated via ElectionGuard.InteropGenerator at /src/interop-generator

using System;
using System.Runtime.InteropServices;
using System.Runtime.ConstrainedExecution;

namespace ElectionGuard
{
    public partial class ");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("\n    {\n        internal External.");
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 22 ""
            this.Write("Handle Handle;\n\n        #region Properties\n\n");
            
            #line default
            #line hidden
            
            #line 26 ""
 foreach (var egProperty in EgClass.Properties) { 
        var isElectionGuardType = egProperty.IsElectionGuardType;
        
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("        /// <Summary>\n        /// ");
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Description ));
            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("\n        /// </Summary>\n        public ");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Type.TypeCs ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("\n        {\n            get\n            {\n");
            
            #line default
            #line hidden
            
            #line 36 ""
 if (isElectionGuardType) { 
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("                var status = External.Get");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("(\n                    Handle, out ");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Type.NativeHandleType ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(" value);\n                status.ThrowIfError();\n                if (value.IsInval" +
                    "id)\n                {\n                    return null;\n                }\n       " +
                    "         return new ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Type.TypeCs ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write("(value);\n");
            
            #line default
            #line hidden
            
            #line 45 ""
 } else if (egProperty.Type.TypeCs == "string") { 
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("                var status = External.Get");
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("(Handle, out IntPtr value);\n                status.ThrowIfError();\n              " +
                    "  var data = Marshal.PtrToStringAnsi(value);\n                NativeInterface.Mem" +
                    "ory.FreeIntPtr(value);\n                return data;\n");
            
            #line default
            #line hidden
            
            #line 51 ""
 } else if (egProperty.Type.TypeCs == "DateTime") { 
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write("                var value = External.Get");
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write("(Handle);\n                return DateTimeOffset.FromUnixTimeMilliseconds((long)va" +
                    "lue).DateTime;\n");
            
            #line default
            #line hidden
            
            #line 54 ""
 } else { 
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("                return External.Get");
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("(Handle);\n");
            
            #line default
            #line hidden
            
            #line 56 ""
 } 
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("            }\n        }\n\n");
            
            #line default
            #line hidden
            
            #line 60 ""
} // foreach EgProperty
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write("        #endregion\n\n        #region Methods\n\n");
            
            #line default
            #line hidden
            
            #line 65 ""
 foreach (var method in EgClass.Methods) { 
    var returnsElectionGuardType = method.ReturnType.IsElectionGuardType;
    
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write("        /// <summary>\n        /// ");
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Description ));
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write("\n        /// </summary>\n");
            
            #line default
            #line hidden
            
            #line 71 ""
 foreach (var p in method.Params.Where(p => p.Description != null)) { 
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write("        /// <param name=\"");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.Name ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write("\">");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.Description ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write("</param>\n");
            
            #line default
            #line hidden
            
            #line 73 ""
 } // for each param 
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("        public ");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.ReturnType.TypeCs ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("(\n            ");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( string.Join(", ", method.Params.Select(p => p.AsCsParam())) ));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write("\n        ) {\n");
            
            #line default
            #line hidden
            
            #line 77 ""
 if (returnsElectionGuardType) { 
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("            var status = External.");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("(\n                Handle,\n");
            
            #line default
            #line hidden
            
            #line 80 ""
 foreach (var p in method.Params) { 
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ToCsArgument() ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 82 ""
 } // for each param 
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write("                out ");
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.ReturnType.NativeHandleType ));
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write(" value);\n            status.ThrowIfError();\n            return new ");
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.ReturnType.TypeCs ));
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("(value);\n");
            
            #line default
            #line hidden
            
            #line 86 ""
 } else if (method.ReturnType.TypeCs == "string") { 
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("            var status = External.");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("(\n                Handle,\n");
            
            #line default
            #line hidden
            
            #line 89 ""
 foreach (var p in method.Params) { 
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ToCsArgument() ));
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 91 ""
 } // for each param 
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write("                out IntPtr pointer, \n                out _\n                );\n   " +
                    "         status.ThrowIfError();\n            var json = Marshal.PtrToStringAnsi(p" +
                    "ointer);\n            NativeInterface.Memory.FreeIntPtr(pointer);\n            ret" +
                    "urn json;\n");
            
            #line default
            #line hidden
            
            #line 99 ""
 } else if (method.ReturnType.TypeCs == "byte[]") { 
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("            var status = External.");
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("(\n                Handle,\n");
            
            #line default
            #line hidden
            
            #line 102 ""
 foreach (var p in method.Params) { 
            
            #line default
            #line hidden
            
            #line 103 ""
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 103 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ToCsArgument() ));
            
            #line default
            #line hidden
            
            #line 103 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 104 ""
 } // for each param 
            
            #line default
            #line hidden
            
            #line 105 ""
            this.Write("                out IntPtr data, \n                out ulong size\n                " +
                    ");\n            status.ThrowIfError();\n\n            if (size > int.MaxValue)\n    " +
                    "        {\n                throw new ElectionGuardException(\"");
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write(" Error ");
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write(": size is too big\");\n            }\n\n            var byteArray = new byte[(int)siz" +
                    "e];\n            Marshal.Copy(data, byteArray, 0, (int)size);\n            NativeI" +
                    "nterface.Memory.DeleteIntPtr(data);\n            return byteArray;\n");
            
            #line default
            #line hidden
            
            #line 119 ""
 } else /* if method return type is a value type */ { 
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write("            return External.");
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write("(\n                Handle");
            
            #line default
            #line hidden
            
            #line 121 ""
 
foreach (var p in method.Params) {
    this.Write($", {p.ToCsArgument()}");
}
                
            
            #line default
            #line hidden
            
            #line 126 ""
            this.Write(");\n");
            
            #line default
            #line hidden
            
            #line 127 ""
 } // end method return type switch 
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write("        }\n\n");
            
            #line default
            #line hidden
            
            #line 130 ""
 } // foreach method 
            
            #line default
            #line hidden
            
            #line 131 ""
            this.Write(@"
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        protected override void DisposeUnmanaged()
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        {
            base.DisposeUnmanaged();

            if (Handle == null || Handle.IsInvalid) return;
            Handle.Dispose();
            Handle = null;
        }
        #endregion

        #region Extern

        internal static unsafe class External {
            internal struct ");
            
            #line default
            #line hidden
            
            #line 147 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 147 ""
            this.Write("Type { };\n\n            internal class ");
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write("Handle : ElectionGuardSafeHandle<");
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 149 ""
            this.Write("Type>\n            {\n#if NETSTANDARD\n                [ReliabilityContract(Consiste" +
                    "ncy.WillNotCorruptState, Cer.MayFail)]\n#endif\n                protected override" +
                    " bool Free()\n                {\n");
            
            #line default
            #line hidden
            
            #line 156 ""

if (EgClass.NeverFree) {

            
            #line default
            #line hidden
            
            #line 159 ""
            this.Write("                    // releasing the C++ memory is currently handled by a parent " +
                    "object e.g. ballot, see https://github.com/microsoft/electionguard-core2/issues/" +
                    "29\n                    return true;\n");
            
            #line default
            #line hidden
            
            #line 161 ""

} else {

            
            #line default
            #line hidden
            
            #line 164 ""
            this.Write(@"                    if (IsFreed) return true;

                    var status = External.Free(TypedPtr);
                    if (status != Status.ELECTIONGUARD_STATUS_SUCCESS)
                    {
                        throw new ElectionGuardException($""");
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write(" Error Free: {status}\", status);\n                    }\n                    return" +
                    " true;\n");
            
            #line default
            #line hidden
            
            #line 172 ""

}

            
            #line default
            #line hidden
            
            #line 175 ""
            this.Write("                }\n            }\n\n            [DllImport(\n                NativeIn" +
                    "terface.DllName, \n                EntryPoint = \"eg_");
            
            #line default
            #line hidden
            
            #line 180 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( EgClass.CFunctionPrefix ));
            
            #line default
            #line hidden
            
            #line 180 ""
            this.Write("_free\",\n                CallingConvention = CallingConvention.Cdecl, \n           " +
                    "     SetLastError = true)]\n            internal static extern Status Free(");
            
            #line default
            #line hidden
            
            #line 183 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 183 ""
            this.Write("Type* handle);\n\n");
            
            #line default
            #line hidden
            
            #line 185 ""
 foreach (var egProperty in EgClass.Properties) {
        var entryPoint = egProperty.GetEntryPoint(EgClass);
        var isElectionGuardType = egProperty.IsElectionGuardType;
        var isReferenceType = egProperty.IsPassByReference;

            
            #line default
            #line hidden
            
            #line 190 ""
            this.Write("            [DllImport(\n                NativeInterface.DllName,\n                " +
                    "EntryPoint = \"");
            
            #line default
            #line hidden
            
            #line 192 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entryPoint ));
            
            #line default
            #line hidden
            
            #line 192 ""
            this.Write("\",\n                CallingConvention = CallingConvention.Cdecl,\n                S" +
                    "etLastError = true)]\n            internal static extern ");
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.GetExternalReturnType() ));
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(" Get");
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Name ));
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write("(\n                ");
            
            #line default
            #line hidden
            
            #line 196 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 196 ""
            this.Write("Handle handle");
            
            #line default
            #line hidden
            
            #line 196 ""
 
if (isElectionGuardType) { 
            
            #line default
            #line hidden
            
            #line 198 ""
            this.Write(",\n                out ");
            
            #line default
            #line hidden
            
            #line 199 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( egProperty.Type.NativeHandleType ));
            
            #line default
            #line hidden
            
            #line 199 ""
            this.Write(" objectId");
            
            #line default
            #line hidden
            
            #line 199 ""
 
} else if (egProperty.Type.TypeCs == "string") { 
            
            #line default
            #line hidden
            
            #line 201 ""
            this.Write(",\n                out IntPtr objectId");
            
            #line default
            #line hidden
            
            #line 202 ""
 
} // end is ElectionGuard type 
            
            #line default
            #line hidden
            
            #line 204 ""
            this.Write("\n                );\n\n");
            
            #line default
            #line hidden
            
            #line 207 ""
 } // end foreach property 
            
            #line default
            #line hidden
            
            #line 208 ""
 foreach (var method in EgClass.Methods) {
    var entryPoint = method.GetEntryPoint(EgClass);
    var returnsElectionGuardType = method.ReturnType.IsElectionGuardType;
    var isReturnTypeReferenceType = method.ReturnType.IsPassByReference;

            
            #line default
            #line hidden
            
            #line 213 ""
            this.Write("            [DllImport(\n                NativeInterface.DllName,\n                " +
                    "EntryPoint = \"");
            
            #line default
            #line hidden
            
            #line 215 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( entryPoint ));
            
            #line default
            #line hidden
            
            #line 215 ""
            this.Write("\",\n                CallingConvention = CallingConvention.Cdecl,\n                S" +
                    "etLastError = true)]\n            internal static extern ");
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( isReturnTypeReferenceType ? "Status" : method.ReturnType.TypeCs ));
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.Name ));
            
            #line default
            #line hidden
            
            #line 218 ""
            this.Write("(\n                ");
            
            #line default
            #line hidden
            
            #line 219 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            
            #line default
            #line hidden
            
            #line 219 ""
            this.Write("Handle handle");
            
            #line default
            #line hidden
            
            #line 219 ""

foreach (var p in method.Params) { 
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(",\n                ");
            
            #line default
            #line hidden
            
            #line 222 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( p.AsCppInteropParam() ));
            
            #line default
            #line hidden
            
            #line 222 ""
 
} // end foreach param 
            
            #line default
            #line hidden
            
            #line 224 ""
 if (returnsElectionGuardType) { 
            
            #line default
            #line hidden
            
            #line 225 ""
            this.Write(",\n                out ");
            
            #line default
            #line hidden
            
            #line 226 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( method.ReturnType.NativeHandleType ));
            
            #line default
            #line hidden
            
            #line 226 ""
            this.Write(" objectId");
            
            #line default
            #line hidden
            
            #line 226 ""

} // if returnsElectionGuardType 
            
            #line default
            #line hidden
            
            #line 228 ""
 if (method.ReturnType.TypeCs == "string" || method.ReturnType.TypeCs == "byte[]") { 
            
            #line default
            #line hidden
            
            #line 229 ""
            this.Write(",\n                out IntPtr data,\n                out ulong size");
            
            #line default
            #line hidden
            
            #line 231 ""

} // if is string or byte[] 
            
            #line default
            #line hidden
            
            #line 233 ""
            this.Write("\n                );\n\n");
            
            #line default
            #line hidden
            
            #line 236 ""
 } 
            
            #line default
            #line hidden
            
            #line 237 ""
            this.Write("        }\n        #endregion\n    }\n}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CsClassTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
