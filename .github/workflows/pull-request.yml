name: Pull Request

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".github/pull-request.yml"
      - "bindings/**"
      - "cmake/**"
      - "include/**"
      - "libs/**"
      - "src/**"
      - "!src/electionguard-ui/**"
      - "test/**"
      - "CMakeLists.txt"
      - "Dockerfile"
      - "Makefile"
    branches: [main]

env:
  TARGET: Release

jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name:
          [
            "ubuntu-22.04-clang-14.0.0",
            "ubuntu-22.04-emscripten-3.1",
            "ubuntu-22.04-gcc-12.1.0",
            "macos-12-xcode-14.1",
            "macos-12-xcode-14.1-arm64",
            "windows-2022-gcc-11",
            "windows-2022-msvc-latest",
            "ubuntu-22.04-linter",
          ]
        include:
          - name: ubuntu-22.04-clang-14.0.0
            os: ubuntu-22.04
            processor: x64
            compiler: clang
            version: "14"
            makeReleaseBuild: false
            lint: false
            runCsTests: false
            runTsTests: false
          - name: ubuntu-22.04-emscripten-3.1
            os: ubuntu-22.04
            processor: x64
            compiler: emscripten
            version: "3.1.35"
            makeReleaseBuild: true
            lint: false
            runCsTests: false
            runTsTests: true
          - name: ubuntu-22.04-gcc-12.1.0
            os: ubuntu-22.04
            processor: x64
            compiler: gcc
            version: "12"
            makeReleaseBuild: false
            lint: false
            runCsTests: false
            runTsTests: false
          - name: macOS-12-xcode-14.1
            os: macOS-12
            processor: x64
            compiler: xcode
            version: "14.1"
            makeReleaseBuild: false
            lint: false
            runCsTests: true
            runTsTests: false
          - name: macOS-12-xcode-14.1-arm64
            os: macOS-12
            processor: arm64
            compiler: xcode
            version: "14.1"
            makeReleaseBuild: false
            lint: false
            runCsTests: false
            runTsTests: false
          - name: windows-2022-gcc-11
            os: windows-2022
            processor: x64
            compiler: gcc
            version: "11"
            makeReleaseBuild: false
            lint: false
            runCsTests: false
            runTsTests: false
          - name: windows-2022-msvc-latest
            os: windows-2022
            processor: x64
            compiler: msvc
            version: "latest"
            makeReleaseBuild: false
            lint: false
            runCsTests: true
            runTsTests: false
          - name: ubuntu-22.04-linter
            os: ubuntu-22.04
            processor: x64
            compiler: clang
            version: "14"
            makeReleaseBuild: false
            lint: true
            runCsTests: true
            runTsTests: false

    steps:
      # Checkout
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Change Directory
        run: cd ${{ github.workspace }}

      # Cache
      - name: Setup Dependency Cache
        id: dependency-cache
        uses: actions/cache@v3
        with:
          path: |
            .cache/
          key: ${{ matrix.name }}-dependencies-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      - name: Setup C++ Build Cache
        id: build-cache
        uses: actions/cache@v3
        with:
          path: |
            build/
          key: ${{ matrix.name }}-build-${{ hashFiles('**/*.h', '**/*.hpp', '**/*.cpp') }}

      - name: Setup Node Cache
        id: node-cache
        if: (matrix.compiler == 'emscripten')
        uses: actions/cache@v3
        with:
          path: |
            bindings/typescript/node_modules/
          key: ${{ matrix.name }}-node-${{ hashFiles('**/package-lock.json') }}

      # Runner Configuration
      - name: Update Environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          elif [ "${{ matrix.compiler }}" = "emscripten" ]; then
            make environment-wasm
            source ./.cache/emscripten/emsdk_env.sh
            # echo "CC=emcc" >> $GITHUB_ENV
            # echo "CXX=em++" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Update Environment (Mac)
        if: runner.os == 'macOS'
        run: |
          ls -ls /Applications/
          ls -ls $ANDROID_SDK_ROOT/ndk
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app

      - name: Update Environment (Windows MSYS2)
        if: (runner.os == 'Windows' && matrix.compiler == 'gcc')
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-gcc

      - name: Update Environment (Windows MSVC x64)
        if: (runner.os == 'Windows' && matrix.compiler == 'msvc' && matrix.processor == 'x64')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.processor }}

      - name: Update Environment (Windows MSVC x86)
        if: (runner.os == 'Windows' && matrix.compiler == 'msvc' && matrix.processor == 'x86')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_x86

      # Tools
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      # Environment
      - name: Configure Environment
        run: make environment

      # Lint
      - name: Lint
        if: (matrix.lint)
        run: make lint

      # Tests
      - name: Run Tests (Linux)
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: (runner.os == 'Linux')
        run: make test

      - name: Run Tests (MacOS)
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: runner.os == 'macOS'
        run: make test

      - name: Run Tests (Windows)
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: (runner.os == 'Windows' && matrix.compiler == 'msvc')
        run: make test

      - name: Run Tests (Windows-msys2)
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: (runner.os == 'Windows' && matrix.compiler == 'gcc')
        run: make test-msys2

      - name: Run .Net Tests
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: (matrix.runCsTests)
        run: make test-netstandard

      - name: Run Typescript Tests (Linux)
        env:
          PROCESSOR: ${{ matrix.processor }}
        if: (matrix.runTsTests)
        run: make build-npm && make test-wasm
